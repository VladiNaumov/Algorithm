package com.NaumDeveloper.Task6;

/*
1. Создать и запустить программу для построения двоичного дерева.
В цикле построить двадцать деревьев с глубиной в 6 уровней.
Данные, которыми необходимо заполнить узлы деревьев, представляются в виде чисел типа int.
Число, которое попадает в узел, должно генерироваться случайным образом в диапазоне от -100 до 100.

2. Проанализировать, какой процент созданных деревьев являются несбалансированными.

Как решать:
Определение сбалансированности :
1. длина пути от корня до любого листового элемента одинакова или отличается не более, чем на единицу;
2. Сбалансированным называют дерево расстояние от корня до самой далёкой вершины которого меньше или равно Log(N) где N количество элементов в дереве. Идея в том, чтобы самый длинный путь от корня к любой из вершин не был бы длиннее Log(N)

Как решать:

При симметричном обходе, когда доходишь до конца левого поддерева возвращаешь в его родитель глубину(будет 1), потом обходишь правое и возвращаешь его глубину. Возвращаясь на уровень выше, возвращаешь в качестве глубины максимальное значение из левой и правой глубин, в качестве глубины для левого/правого поддерева. Параллельно, проверяешь, если после обхода правого поддерева глубины различаются более чем на 1, то завершаешь алгоритм и говоришь, что дерево не сбалансировано.

public static boolean isBalanced(Node node) {
return (node == null) ||
isBalanced(node.leftChild) &&
isBalanced(node.rightChild) &&
Math.abs(height(node.leftChild) - height(node.rightChild)) <= 1;
}
​
private static int height(Node node) {
return node == null ? 0 : 1 + Math.max(height(node.leftChild), height(node.rightChild));
}

По поводу практического применения методов обхода деревьев:
Общая суть - вывод элементов в определенном порядке / поиск определенного элемента.
В зависимости от конкретной задачи иногда требуется применить тот или иной метод обхода, чтобы пробежаться по всем элементам дерева.
​
Небольшие примеры:
Симметричный обход - позволяет вывести отсортированный список данных двоичного дерева.
Прямой и обратный - запись математических выражений в префиксной/постфиксной записи соответсвенно.

 */

public class HomeWork {
}
